{"version":3,"sources":["components/Categories/CategoryForm/index.tsx","components/Categories/CategoriesList/index.tsx","pages/Categories/view.tsx","pages/Categories/index.tsx"],"names":["CategoryForm","name","setName","categoryType","setCategoryType","buttonText","handleSubmit","t","useTranslation","Form","className","FormControl","type","placeholder","value","onChange","e","target","Button","variant","onClick","CategoriesList","categories","useState","isModalShown","setIsModalShown","selectedCategoryId","setSelectedCategoryId","dispatch","useAppDispatch","length","Row","spaceBetween","slidesPerView","breakpoints","centerInsufficientSlides","map","category","Card","Body","Title","Text","Dropdown","drop","Toggle","as","CustomToggle","id","Menu","Item","categoryId","selectedCategory","find","_id","handleEditClick","deleteCategory","Modal","show","onHide","centered","Header","closeButton","categoryForUpdate","updateCategory","Categories","handleAddCategory","Container","Col","xs","lg","CategoriesPage","useAppSelector","state","categoryDate","useEffect","getCategories","some","toLowerCase","trim","toast","position","autoClose","hideProgressBar","closeOnClick","theme","createCategory"],"mappings":"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","file":"static/js/6.e2a7fb4e.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\nimport { Button, Form, FormControl } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\n\nimport { categoriesTypes } from 'types/category.type';\n\ntype propsType = {\n  name: string;\n  setName: Dispatch<SetStateAction<string>>;\n  categoryType: string;\n  setCategoryType: Dispatch<SetStateAction<categoriesTypes>>;\n  buttonText: string;\n  handleSubmit: () => void;\n};\n\nconst CategoryForm: React.FC<propsType> = ({\n  name,\n  setName,\n  categoryType,\n  setCategoryType,\n  buttonText,\n  handleSubmit,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Form className=\"text-center\">\n      <FormControl\n        type=\"text\"\n        placeholder={t('name the category')}\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n        className=\"mb-3\"\n      />\n      <div className=\"d-flex justify-content-center mb-3\">\n        <div className=\"w-50 text-center\">\n          <Button\n            variant={categoryType === 'expense' ? 'danger' : 'outline-danger'}\n            onClick={() => setCategoryType('expense')}\n            className=\"w-50\"\n          >\n            {t('expense')}\n          </Button>\n        </div>\n        <div className=\"w-50 text-center\">\n          <Button\n            variant={categoryType === 'profit' ? 'success' : 'outline-success'}\n            onClick={() => setCategoryType('profit')}\n            className=\"w-50\"\n          >\n            {t('profit')}\n          </Button>\n        </div>\n      </div>\n      <Button\n        variant=\"warning\"\n        className=\"w300Px text-white\"\n        onClick={handleSubmit}\n      >\n        {t(buttonText)}\n      </Button>\n    </Form>\n  );\n};\n\nexport default CategoryForm;\n","import React, { useState } from 'react';\nimport { Card, Dropdown, Modal, Row } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\nimport { categoriesTypes, categoryType } from 'types/category.type';\nimport CustomToggle from 'components/CustomToggle';\nimport { useAppDispatch } from 'hooks/react-redux.hook';\nimport {\n  deleteCategory,\n  updateCategory,\n} from 'store/reducers/category.reducer';\nimport CategoryForm from 'components/Categories/CategoryForm';\n\ntype propsType = {\n  categories: categoryType[];\n};\n\nconst CategoriesList: React.FC<propsType> = ({ categories }) => {\n  const [isModalShown, setIsModalShown] = useState<boolean>(false);\n  const [name, setName] = useState<string>('');\n  const [categoryType, setCategoryType] = useState<categoriesTypes>('expense');\n  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('');\n\n  const { t } = useTranslation();\n  const dispatch = useAppDispatch();\n\n  const handleEditClick = (categoryId: string) => {\n    const selectedCategory = categories.find(\n      (category) => category._id === categoryId,\n    );\n\n    setName(selectedCategory?.name!);\n    setCategoryType(selectedCategory?.categoryType!);\n    setSelectedCategoryId(categoryId);\n    setIsModalShown(true);\n  };\n\n  const handleEditBalance = () => {\n    const selectedCategory = categories.find(\n      (category) => category._id === selectedCategoryId,\n    );\n\n    if (selectedCategory) {\n      const categoryForUpdate = {\n        ...selectedCategory,\n        categoryType,\n        name,\n      };\n\n      dispatch(\n        updateCategory({\n          categoryId: selectedCategoryId,\n          category: categoryForUpdate,\n        }),\n      );\n    }\n\n    setSelectedCategoryId('');\n    setName('');\n    setCategoryType('expense');\n    setIsModalShown(false);\n  };\n\n  if (!categories.length) {\n    return null;\n  }\n\n  return (\n    <>\n      <Row className=\"mb-3  justify-content-center d-flex\">\n        <Swiper\n          spaceBetween={20}\n          slidesPerView={1}\n          className=\"mb-3  justify-content-center d-flex px-2\"\n          breakpoints={{\n            450: {\n              slidesPerView: 2,\n              spaceBetween: 30,\n            },\n            768: {\n              slidesPerView: 3,\n              spaceBetween: 40,\n            },\n            1200: {\n              slidesPerView: 4,\n              spaceBetween: 50,\n            },\n          }}\n          centerInsufficientSlides\n        >\n          {categories.map((category) => (\n            <SwiperSlide className=\"mb-3\" key={category._id}>\n              <Card className=\"h-100\">\n                <Card.Body className=\"d-flex justify-content-between\">\n                  <div>\n                    <Card.Title>{category.name}</Card.Title>\n                    <Card.Text>\n                      {`${t('category type')}: ${t(category.categoryType)}`}\n                    </Card.Text>\n                  </div>\n                  <Dropdown drop=\"start\">\n                    <Dropdown.Toggle\n                      as={CustomToggle}\n                      id=\"dropdown-custom-components\"\n                    />\n                    <Dropdown.Menu>\n                      <Dropdown.Item\n                        as=\"span\"\n                        onClick={() => handleEditClick(category._id!)}\n                      >\n                        {t('edit')}\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        as=\"span\"\n                        onClick={() =>\n                          dispatch(\n                            deleteCategory({ categoryId: category._id! }),\n                          )\n                        }\n                      >\n                        {t('remove')}\n                      </Dropdown.Item>\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </Card.Body>\n              </Card>\n            </SwiperSlide>\n          ))}\n        </Swiper>\n        <Modal\n          show={isModalShown}\n          onHide={() => setIsModalShown(false)}\n          centered\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{t('edit category')}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <CategoryForm\n              name={name}\n              setName={setName}\n              categoryType={categoryType}\n              setCategoryType={setCategoryType}\n              handleSubmit={handleEditBalance}\n              buttonText=\"update\"\n            />\n          </Modal.Body>\n        </Modal>\n      </Row>\n    </>\n  );\n};\n\nexport default CategoriesList;\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Button, Col, Container, FormControl, Row } from 'react-bootstrap';\n\nimport { categoriesTypes, categoryType } from 'types/category.type';\nimport CategoriesList from 'components/Categories/CategoriesList';\nimport CategoryForm from 'components/Categories/CategoryForm';\n\ntype propsType = {\n  t: (text: string) => string;\n  categories: categoryType[];\n  name: string;\n  setName: Dispatch<SetStateAction<string>>;\n  categoryType: string;\n  setCategoryType: Dispatch<SetStateAction<categoriesTypes>>;\n  handleAddCategory: () => void;\n};\n\nconst Categories: React.FC<propsType> = ({\n  t,\n  categories,\n  name,\n  setName,\n  categoryType,\n  setCategoryType,\n  handleAddCategory,\n}) => (\n  <>\n    <Container className=\"py-4\">\n      <p className=\"fs-4 fw-bold text-center py-2\">\n        {t(\n          categories.length\n            ? 'all your categories'\n            : 'your categories will be here',\n        )}\n      </p>\n      <CategoriesList categories={categories} />\n      <Row className=\"text-center\">\n        <Col xs=\"12\" lg=\"5\" className=\"mb-3 mb-lg-0 mx-auto\">\n          <p className=\"fs-5 fw-bold\">{t('add new category')}:</p>\n          <CategoryForm\n            name={name}\n            setName={setName}\n            categoryType={categoryType}\n            setCategoryType={setCategoryType}\n            handleSubmit={handleAddCategory}\n            buttonText=\"create\"\n          />\n        </Col>\n      </Row>\n    </Container>\n  </>\n);\n\nexport default Categories;\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { toast } from 'react-toastify';\n\nimport { useAppDispatch, useAppSelector } from 'hooks/react-redux.hook';\nimport { createCategory, getCategories } from 'store/reducers/category.reducer';\nimport { categoriesTypes } from 'types/category.type';\n\nimport Categories from './view';\n\nconst CategoriesPage = () => {\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const { categories } = useAppSelector((state) => state.categoryDate);\n  const [name, setName] = useState<string>('');\n  const [categoryType, setCategoryType] = useState<categoriesTypes>('expense');\n\n  useEffect(() => {\n    dispatch(getCategories());\n  }, []);\n\n  const handleAddCategory = () => {\n    if (!name) {\n      return toast(t('All fields are required'), {\n        position: 'top-right',\n        autoClose: 2500,\n        hideProgressBar: true,\n        closeOnClick: true,\n        theme: 'dark',\n        type: 'error',\n      });\n    }\n\n    const isAlreadyExists = categories.some(\n      (category) =>\n        category.name.toLowerCase().trim() === name &&\n        category.categoryType === categoryType,\n    );\n\n    if (isAlreadyExists) {\n      return toast(t('category already exists'), {\n        position: 'top-right',\n        autoClose: 2500,\n        hideProgressBar: true,\n        closeOnClick: true,\n        theme: 'dark',\n        type: 'error',\n      });\n    }\n\n    dispatch(\n      createCategory({\n        category: {\n          name,\n          categoryType,\n        },\n      }),\n    );\n\n    setName('');\n    setCategoryType('expense');\n  };\n\n  return (\n    <Categories\n      t={t}\n      categories={categories}\n      name={name}\n      setName={setName}\n      categoryType={categoryType}\n      setCategoryType={setCategoryType}\n      handleAddCategory={handleAddCategory}\n    />\n  );\n};\n\nexport default CategoriesPage;\n"],"sourceRoot":""}