{"version":3,"sources":["components/Statistic/WholeStatistic/index.tsx","components/Statistic/Diagram/index.tsx","components/Statistic/ListItem/index.tsx","components/Statistic/List/index.tsx","components/Statistic/RangeStatistic/index.tsx","pages/statistic/Statistic.tsx"],"names":["WholeStatistic","wholeStatistic","user","lang","t","useTranslation","daysOnApp","moment","diff","created","className","userExpenses","userExpensesThisMonth","userIncomes","userIncomesThisMonth","averageIncomePerMonth","averageExpensePerMonth","Math","ceil","locale","format","Diagram","statisticForRange","totalSpent","useState","hovered","setHovered","colors","dataForRange","map","el","index","value","total","color","tooltip","_id","name","formattingNumber","data","style","height","width","segmentsShift","label","dataEntry","round","percentage","totalValue","labelStyle","fontSize","fill","onMouseOver","onMouseOut","segmentsStyle","transition","cursor","getContent","ListItem","listItem","Card","bg","text","Body","Row","Col","xs","sm","title","List","sort","a","b","RangeStatistic","monthsRange","setMonthsRange","useAppSelector","userData","isStatisticForRangeLoading","statisticData","useDiagram","setUseDiagram","onChange","maxDetail","calendarIcon","clearIcon","minDetail","minDate","Date","maxDate","Button","size","variant","onClick","Loader","transactionsInRange","Statistic","dispatch","useAppDispatch","isWholeStatisticLoading","useEffect","getWholeStatistic","getStatisticForRange","from","to","Container","md"],"mappings":"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","file":"static/js/4.564ea487.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport moment from 'moment';\nimport { useTranslation } from 'react-i18next';\n\nimport { wholeStatisticType } from 'types/statistic.type';\nimport { userType } from 'types/user.type';\n\ntype propsType = {\n  wholeStatistic: wholeStatisticType;\n  user: userType;\n  lang: string;\n};\n\nconst WholeStatistic: FC<propsType> = ({ wholeStatistic, user, lang }) => {\n  const { t } = useTranslation();\n  const daysOnApp = moment().diff(user.created, 'days') + 1;\n\n  return (\n    <>\n      <p className=\"fs-5 mb-0 fw-bold\">{t('General statistic')}:</p>\n      <div className=\"spent\">\n        <p className=\"mb-0\">\n          {t('Spent for the whole time')}:\n          <span className=\"fst-italic yellowText\">\n            {wholeStatistic.userExpenses}\n          </span>\n        </p>\n\n        <p className=\"mb-0\">\n          {t('Spent this month')}:\n          <span className=\"fst-italic yellowText\">\n            {' '}\n            {wholeStatistic.userExpensesThisMonth}\n          </span>\n        </p>\n      </div>\n      <div className=\"earned mt-2\">\n        <p className=\"mb-0\">\n          {t('Earned for the whole time')}:\n          <span className=\"fst-italic yellowText\">\n            {wholeStatistic.userIncomes}\n          </span>\n        </p>\n\n        <p className=\"mb-0\">\n          {t('Earned this month')}:\n          <span className=\"fst-italic yellowText\">\n            {wholeStatistic.userIncomesThisMonth}\n          </span>\n        </p>\n\n        {wholeStatistic.averageIncomePerMonth > 0 && (\n          <p className=\"mb-0\">\n            {t('Average earned per month')}:\n            <span className=\"fst-italic yellowText\">\n              {' '}\n              {wholeStatistic.averageIncomePerMonth}\n            </span>\n          </p>\n        )}\n\n        {wholeStatistic.averageExpensePerMonth > 0 && (\n          <p className=\"mt-2 mb-0\">\n            {t('Average spent per month')}:\n            <span className=\"fst-italic yellowText\">\n              {' '}\n              {wholeStatistic.averageExpensePerMonth}\n            </span>\n          </p>\n        )}\n\n        <p className=\"mb-1\">\n          {t('Average spent per day')}:\n          <span className=\"fst-italic yellowText\">\n            {' '}\n            {Math.ceil(wholeStatistic.userExpenses / daysOnApp)}\n          </span>\n        </p>\n\n        <p className=\"fs-6 mb-0 fw-bold\">\n          {t('On')} <span className=\"yellowText\">Billionstracker</span>{' '}\n          {t('Since')}{' '}\n          <span className=\"fst-italic yellowText\">\n            {moment(user.created).locale(lang).format('LL')}\n          </span>\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default WholeStatistic;\n","import React, { FC, useState } from 'react';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport ReactTooltip from 'react-tooltip';\n\nimport { expenseIncomeType } from 'types/statistic.type';\nimport { formattingNumber } from 'utils/formattingNumber';\n\ntype propsType = {\n  statisticForRange: expenseIncomeType[];\n  totalSpent: number;\n};\n\nconst Diagram: FC<propsType> = ({ statisticForRange, totalSpent }) => {\n  const [hovered, setHovered] = useState<number | null>(null);\n\n  const colors = [\n    '#E38627',\n    '#C13C37',\n    '#6A2135',\n    '#E38627',\n    '#C13C37',\n    '#6A2135',\n    '#E38627',\n    '#C13C37',\n    '#6A2135',\n    '#E38627',\n    '#C13C37',\n    '#6A2135',\n  ];\n\n  type rangeDataType = {\n    value: number;\n    color: string;\n    tooltip: string;\n  };\n\n  const dataForRange: rangeDataType[] = statisticForRange.map((el, index) => ({\n    value: el.total,\n    color: hovered === index ? 'grey' : colors[index],\n    tooltip: `${el._id.name}, ${formattingNumber(el.total)}`,\n  }));\n\n  return (\n    <>\n      {totalSpent > 0 && (\n        <>\n          <PieChart\n            data={dataForRange}\n            style={{ height: '300px', width: '300px' }}\n            segmentsShift={0.5}\n            label={({ dataEntry }) =>\n              `${\n                Math.round(dataEntry.percentage)\n                  ? Math.round(dataEntry.percentage)\n                  : '>1'\n              }%`\n            }\n            totalValue={totalSpent}\n            labelStyle={{\n              fontSize: '5px',\n              fill: 'white',\n            }}\n            onMouseOver={(el, index) => {\n              setHovered(index);\n            }}\n            onMouseOut={() => {\n              setHovered(null);\n            }}\n            segmentsStyle={{ transition: 'stroke .3s', cursor: 'pointer' }}\n          />\n          <ReactTooltip\n            getContent={() =>\n              typeof hovered === 'number'\n                ? dataForRange[hovered]?.tooltip\n                : null\n            }\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Diagram;\n","import React, { FC } from 'react';\nimport { Card, Col, Row } from 'react-bootstrap';\n\nimport { formattingNumber } from 'utils/formattingNumber';\nimport { listForRangeItem } from 'components/Statistic/List';\n\ntype propsType = {\n  listItem: listForRangeItem;\n};\n\nconst ListItem: FC<propsType> = ({ listItem }) => {\n  return (\n    <Card\n      className=\"mb-3  w-75 mx-auto fw-bold text-center\"\n      bg=\"light\"\n      text=\"dark\"\n    >\n      <Card.Body>\n        <Row>\n          <Col xs=\"4\" sm=\"4\" className=\"mb-2 mb-sm-0\">\n            {listItem.title}\n          </Col>\n          <Col xs=\"4\" sm=\"4\">\n            {formattingNumber(listItem.value)}\n          </Col>\n          <Col xs=\"4\" sm=\"4\">\n            {listItem.percentage}%\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default ListItem;\n","import React, { FC } from 'react';\n\nimport { expenseIncomeType } from 'types/statistic.type';\nimport ListItem from 'components/Statistic/ListItem';\n\ntype propsType = {\n  statisticForRange: expenseIncomeType[];\n  totalSpent: number;\n};\n\nexport type listForRangeItem = {\n  title: string;\n  value: number;\n  percentage: number | string;\n};\n\nexport const List: FC<propsType> = ({ statisticForRange, totalSpent }) => {\n  const dataForRange: listForRangeItem[] = statisticForRange.map(\n    (el, index) => ({\n      title: el._id.name,\n      value: el.total,\n      percentage: Math.round((100 * el.total) / totalSpent) || '>1',\n    }),\n  );\n\n  return (\n    <div>\n      {dataForRange\n        .sort((a, b) => b.value - a.value)\n        .map((listItem) => (\n          <ListItem key={listItem.title} listItem={listItem} />\n        ))}\n    </div>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\n//@ts-ignore\n//todo: learn how to work when there is no ts for library\nimport DateRangePicker from '@wojtekmaj/react-daterange-picker';\n\nimport Loader from 'components/Loader';\nimport Diagram from 'components/Statistic/Diagram';\nimport { List } from 'components/Statistic/List';\nimport { useAppSelector } from 'hooks/react-redux.hook';\nimport { statisticData, userData } from 'store/selectors';\nimport { statisticForRangeType } from 'types/statistic.type';\n\nimport './styles.scss';\n\ntype propsType = {\n  statisticForRange: statisticForRangeType;\n  setMonthsRange: React.Dispatch<React.SetStateAction<Date[]>>;\n  monthsRange: Date[];\n};\n\nconst RangeStatistic: FC<propsType> = ({\n  statisticForRange,\n  monthsRange,\n  setMonthsRange,\n}) => {\n  const { t } = useTranslation();\n  const { lang } = useAppSelector(userData);\n  const { isStatisticForRangeLoading } = useAppSelector(statisticData);\n  const [useDiagram, setUseDiagram] = useState<boolean>(true);\n\n  return (\n    <>\n      <p className=\"fs-5 mb-0 fw-bold text-center\">{t('Select range')}:</p>\n      <div className=\"d-flex justify-content-center\">\n        <DateRangePicker\n          onChange={setMonthsRange}\n          maxDetail=\"year\"\n          value={monthsRange}\n          locale={lang}\n          calendarIcon={null}\n          clearIcon={null}\n          format=\"MM.y\"\n          minDetail=\"year\"\n          minDate={new Date(2021, 3, 1)}\n          maxDate={new Date()}\n        />\n      </div>\n      <div className=\"rangeHolder mt-3 text-center\" data-tip=\"chart\">\n        {statisticForRange.totalSpent > 0 && (\n          <div className=\"rangeHolderControls mb-3\">\n            <Button\n              size=\"sm\"\n              className={`mx-2 ${useDiagram ? 'text-white' : ''}`}\n              variant={useDiagram ? 'warning' : 'outline-warning'}\n              onClick={() => setUseDiagram(true)}\n            >\n              {t('Pie chart')}\n            </Button>\n            <Button\n              size=\"sm\"\n              className={useDiagram ? '' : 'text-white'}\n              variant={useDiagram ? 'outline-warning' : 'warning'}\n              onClick={() => setUseDiagram(false)}\n            >\n              {t('List')}\n            </Button>\n          </div>\n        )}\n        {isStatisticForRangeLoading ? (\n          <Loader />\n        ) : (\n          <>\n            <p className=\"fw-bold\">\n              {t('Spent during this period')}:\n              <span className=\"fst-italic yellowText\">\n                {' '}\n                {statisticForRange.totalSpent}\n              </span>\n            </p>\n            {useDiagram ? (\n              <Diagram\n                totalSpent={statisticForRange.totalSpent}\n                statisticForRange={statisticForRange.transactionsInRange}\n              />\n            ) : (\n              <List\n                totalSpent={statisticForRange.totalSpent}\n                statisticForRange={statisticForRange.transactionsInRange}\n              />\n            )}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default RangeStatistic;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\n\nimport { useAppDispatch, useAppSelector } from 'hooks/react-redux.hook';\nimport {\n  getStatisticForRange,\n  getWholeStatistic,\n} from 'store/reducers/statistic.reducer';\nimport { statisticData, userData } from 'store/selectors';\nimport Loader from 'components/Loader';\nimport WholeStatistic from 'components/Statistic/WholeStatistic';\nimport RangeStatistic from 'components/Statistic/RangeStatistic';\nimport 'moment/locale/ru';\n\nconst Statistic: FC = () => {\n  const dispatch = useAppDispatch();\n  const {\n    wholeStatistic,\n    statisticForRange,\n    isWholeStatisticLoading,\n    isStatisticForRangeLoading,\n  } = useAppSelector(statisticData);\n  const { t } = useTranslation();\n  const { user, lang } = useAppSelector(userData);\n\n  useEffect(() => {\n    dispatch(getWholeStatistic());\n  }, []);\n\n  const [monthsRange, setMonthsRange] = useState<Date[]>([\n    new Date(user.created),\n    new Date(),\n  ]);\n\n  useEffect(() => {\n    dispatch(\n      getStatisticForRange({ from: monthsRange[0], to: monthsRange[1] }),\n    );\n  }, [monthsRange]);\n\n  if (isWholeStatisticLoading && isStatisticForRangeLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <Container className=\"py-4\">\n      {wholeStatistic && statisticForRange ? (\n        <Row>\n          <Col xs=\"12\" md=\"6\">\n            <RangeStatistic\n              statisticForRange={statisticForRange}\n              monthsRange={monthsRange}\n              setMonthsRange={setMonthsRange}\n            />\n          </Col>\n          <Col xs=\"12\" md=\"6\">\n            <WholeStatistic\n              wholeStatistic={wholeStatistic}\n              user={user}\n              lang={lang}\n            />\n          </Col>\n        </Row>\n      ) : (\n        <div className=\"d-flex justify-content-center align-items-center h-100 fw-bold my-3 my-md-0 \">\n          <p>{t('Some of your statistic will be here')}</p>\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default Statistic;\n"],"sourceRoot":""}