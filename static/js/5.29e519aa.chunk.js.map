{"version":3,"sources":["pages/Balances/view.tsx","pages/Balances/index.tsx"],"names":["Balances","t","balances","name","setName","amount","handleChangeAmount","handleAddBalance","Container","className","length","BalancesList","withMenu","Row","Col","xs","lg","BalanceForm","handleSubmit","buttonText","BalancesPage","useState","setAmount","dispatch","useAppDispatch","useTranslation","useAppSelector","state","balanceData","some","balance","toLowerCase","trim","toast","position","autoClose","hideProgressBar","closeOnClick","theme","type","createBalance","Number"],"mappings":"wPAmDeA,EAlCuB,SAAC,GAAD,IACpCC,EADoC,EACpCA,EACAC,EAFoC,EAEpCA,SACAC,EAHoC,EAGpCA,KACAC,EAJoC,EAIpCA,QACAC,EALoC,EAKpCA,OACAC,EANoC,EAMpCA,mBACAC,EAPoC,EAOpCA,iBAPoC,OASpC,mCACE,eAACC,EAAA,EAAD,CAAWC,UAAU,OAArB,UACE,mBAAGA,UAAU,gCAAb,SACGR,EACCC,EAASQ,OAAS,oBAAsB,gCAG5C,cAACC,EAAA,EAAD,CAAcC,UAAQ,IACtB,cAACC,EAAA,EAAD,CAAKJ,UAAU,cAAf,SACE,eAACK,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIP,UAAU,uBAA9B,UACE,oBAAGA,UAAU,eAAb,UAA6BR,EAAE,mBAA/B,OACA,cAACgB,EAAA,EAAD,CACEd,KAAMA,EACNC,QAASA,EACTC,OAAQA,EACRC,mBAAoBA,EACpBY,aAAcX,EACdY,WAAW,sBCoBRC,UArDM,WACnB,MAAwBC,mBAAiB,IAAzC,mBAAOlB,EAAP,KAAaC,EAAb,KACA,EAA4BiB,mBAA0B,IAAtD,mBAAOhB,EAAP,KAAeiB,EAAf,KAEMC,EAAWC,cACTvB,EAAMwB,cAANxB,EACAC,EAAawB,aAAe,SAACC,GAAD,OAAWA,EAAMC,eAA7C1B,SAkCR,OACE,cAAC,EAAD,CACED,EAAGA,EACHC,SAAUA,EACVC,KAAMA,EACNC,QAASA,EACTC,OAAQA,EACRC,mBAAoBA,YAAmBgB,GACvCf,iBAxCqB,WACvB,OAAKJ,GAASE,EAWYH,EAAS2B,MACjC,SAACC,GAAD,OAAaA,EAAQ3B,KAAK4B,cAAcC,SAAW7B,KAG5C8B,YAAMhC,EAAE,yBAA0B,CACvCiC,SAAU,YACVC,UAAW,KACXC,iBAAiB,EACjBC,cAAc,EACdC,MAAO,OACPC,KAAM,WAIVhB,EAASiB,YAAc,CAAErC,OAAME,OAAQoC,OAAOpC,MAE9CD,EAAQ,SACRkB,EAAU,KA3BDW,YAAMhC,EAAE,2BAA4B,CACzCiC,SAAU,YACVC,UAAW,KACXC,iBAAiB,EACjBC,cAAc,EACdC,MAAO,OACPC,KAAM","file":"static/js/5.29e519aa.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nimport { balanceType } from 'types/balance.type';\nimport BalancesList from 'components/Balances/BalancesList';\nimport BalanceForm from 'components/Balances/BalanceForm';\n\ntype propsType = {\n  t: (text: string) => string;\n  balances: balanceType[];\n  name: string;\n  setName: Dispatch<SetStateAction<string>>;\n  amount: string | number;\n  handleChangeAmount: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  handleAddBalance: () => void;\n};\n\nconst Balances: React.FC<propsType> = ({\n  t,\n  balances,\n  name,\n  setName,\n  amount,\n  handleChangeAmount,\n  handleAddBalance,\n}) => (\n  <>\n    <Container className=\"py-4\">\n      <p className=\"fs-4 fw-bold text-center py-2\">\n        {t(\n          balances.length ? 'all your balances' : 'your balances will be here',\n        )}\n      </p>\n      <BalancesList withMenu />\n      <Row className=\"text-center\">\n        <Col xs=\"12\" lg=\"6\" className=\"mb-3 mb-lg-0 mx-auto\">\n          <p className=\"fs-5 fw-bold\">{t('add new balance')}:</p>\n          <BalanceForm\n            name={name}\n            setName={setName}\n            amount={amount}\n            handleChangeAmount={handleChangeAmount}\n            handleSubmit={handleAddBalance}\n            buttonText=\"create\"\n          />\n        </Col>\n      </Row>\n    </Container>\n  </>\n);\n\nexport default Balances;\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { toast } from 'react-toastify';\n\nimport { useAppDispatch, useAppSelector } from 'hooks/react-redux.hook';\nimport { createBalance } from 'store/reducers/balance.reducer';\nimport { handleChangeAmount } from 'utils/handleChangeAmount';\n\nimport Balances from './view';\n\nconst BalancesPage = () => {\n  const [name, setName] = useState<string>('');\n  const [amount, setAmount] = useState<number | string>('');\n\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const { balances } = useAppSelector((state) => state.balanceData);\n\n  const handleAddBalance = () => {\n    if (!name || !amount) {\n      return toast(t('All fields are required'), {\n        position: 'top-right',\n        autoClose: 2500,\n        hideProgressBar: true,\n        closeOnClick: true,\n        theme: 'dark',\n        type: 'error',\n      });\n    }\n\n    const isNameAlreadyUsed = balances.some(\n      (balance) => balance.name.toLowerCase().trim() === name,\n    );\n    if (isNameAlreadyUsed) {\n      return toast(t('name should be unique'), {\n        position: 'top-right',\n        autoClose: 2500,\n        hideProgressBar: true,\n        closeOnClick: true,\n        theme: 'dark',\n        type: 'error',\n      });\n    }\n\n    dispatch(createBalance({ name, amount: Number(amount) }));\n\n    setName('');\n    setAmount('');\n  };\n\n  return (\n    <Balances\n      t={t}\n      balances={balances}\n      name={name}\n      setName={setName}\n      amount={amount}\n      handleChangeAmount={handleChangeAmount(setAmount)}\n      handleAddBalance={handleAddBalance}\n    />\n  );\n};\n\nexport default BalancesPage;\n"],"sourceRoot":""}